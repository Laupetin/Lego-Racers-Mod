
// Generated from ..\..\..\src\AssetLib\Parsing\Parser\Gdb\Gdb.g4 by ANTLR 4.10.1


#include "GdbLexer.h"


using namespace antlr4;

using namespace gdb;


using namespace antlr4;

namespace {

struct GdbLexerStaticData final {
  GdbLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GdbLexerStaticData(const GdbLexerStaticData&) = delete;
  GdbLexerStaticData(GdbLexerStaticData&&) = delete;
  GdbLexerStaticData& operator=(const GdbLexerStaticData&) = delete;
  GdbLexerStaticData& operator=(GdbLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag gdblexerLexerOnceFlag;
GdbLexerStaticData *gdblexerLexerStaticData = nullptr;

void gdblexerLexerInitialize() {
  assert(gdblexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<GdbLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "Materials", "Scale", "Vertices", "Faces", "Meta", 
      "Vertex", "Uv", "Color", "Normal", "Texture", "Face", "Keyword27", 
      "Keyword2D", "Keyword2F", "Keyword30", "Keyword31", "Keyword32", "IntegerConstant", 
      "DecimalConstant", "HexadecimalConstant", "HexadecimalPrefix", "FloatingConstant", 
      "DigitSequence", "NonzeroDigit", "Digit", "HexadecimalDigit", "Zero", 
      "IntegerSign", "StringLiteral", "SCharSequence", "SChar", "EscapeSequence", 
      "Whitespace", "Newline", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'{'", "'}'", "'materials'", "'scale'", "'vertices'", "'faces'", 
      "'meta'", "'v'", "'uv'", "'clr'", "'vn'", "'texture'", "'f'", "'keyword27'", 
      "'keyword2D'", "'keyword2F'", "'keyword30'", "'keyword31'", "'keyword32'"
    },
    std::vector<std::string>{
      "", "", "", "Materials", "Scale", "Vertices", "Faces", "Meta", "Vertex", 
      "Uv", "Color", "Normal", "Texture", "Face", "Keyword27", "Keyword2D", 
      "Keyword2F", "Keyword30", "Keyword31", "Keyword32", "IntegerConstant", 
      "FloatingConstant", "DigitSequence", "StringLiteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,27,324,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,
  	1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
  	17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,203,8,19,1,20,3,20,206,
  	8,20,1,20,1,20,5,20,210,8,20,10,20,12,20,213,9,20,1,21,3,21,216,8,21,
  	1,21,1,21,4,21,220,8,21,11,21,12,21,221,1,22,1,22,1,22,1,23,3,23,228,
  	8,23,1,23,3,23,231,8,23,1,23,1,23,1,23,3,23,236,8,23,1,23,1,23,1,23,3,
  	23,241,8,23,1,24,4,24,244,8,24,11,24,12,24,245,1,25,1,25,1,26,1,26,1,
  	27,1,27,1,28,3,28,255,8,28,1,28,1,28,1,29,1,29,1,30,1,30,3,30,263,8,30,
  	1,30,1,30,1,31,4,31,268,8,31,11,31,12,31,269,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,3,32,279,8,32,1,33,1,33,1,33,1,34,4,34,285,8,34,11,34,12,34,
  	286,1,34,1,34,1,35,1,35,3,35,293,8,35,1,35,3,35,296,8,35,1,35,1,35,1,
  	36,1,36,1,36,1,36,5,36,304,8,36,10,36,12,36,307,9,36,1,36,1,36,1,36,1,
  	36,1,36,1,37,1,37,1,37,1,37,5,37,318,8,37,10,37,12,37,321,9,37,1,37,1,
  	37,1,305,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
  	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,45,0,47,
  	21,49,22,51,0,53,0,55,0,57,0,59,0,61,23,63,0,65,0,67,0,69,24,71,25,73,
  	26,75,27,1,0,9,2,0,88,88,120,120,1,0,49,57,1,0,48,57,3,0,48,57,65,70,
  	97,102,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,10,0,34,34,39,39,63,
  	63,92,92,97,98,102,102,110,110,114,114,116,116,118,118,2,0,9,9,32,32,
  	2,0,10,10,13,13,334,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
  	9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
  	0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
  	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
  	47,1,0,0,0,0,49,1,0,0,0,0,61,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
  	0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,7,91,1,0,0,
  	0,9,97,1,0,0,0,11,106,1,0,0,0,13,112,1,0,0,0,15,117,1,0,0,0,17,119,1,
  	0,0,0,19,122,1,0,0,0,21,126,1,0,0,0,23,129,1,0,0,0,25,137,1,0,0,0,27,
  	139,1,0,0,0,29,149,1,0,0,0,31,159,1,0,0,0,33,169,1,0,0,0,35,179,1,0,0,
  	0,37,189,1,0,0,0,39,202,1,0,0,0,41,205,1,0,0,0,43,215,1,0,0,0,45,223,
  	1,0,0,0,47,240,1,0,0,0,49,243,1,0,0,0,51,247,1,0,0,0,53,249,1,0,0,0,55,
  	251,1,0,0,0,57,254,1,0,0,0,59,258,1,0,0,0,61,260,1,0,0,0,63,267,1,0,0,
  	0,65,278,1,0,0,0,67,280,1,0,0,0,69,284,1,0,0,0,71,295,1,0,0,0,73,299,
  	1,0,0,0,75,313,1,0,0,0,77,78,5,123,0,0,78,2,1,0,0,0,79,80,5,125,0,0,80,
  	4,1,0,0,0,81,82,5,109,0,0,82,83,5,97,0,0,83,84,5,116,0,0,84,85,5,101,
  	0,0,85,86,5,114,0,0,86,87,5,105,0,0,87,88,5,97,0,0,88,89,5,108,0,0,89,
  	90,5,115,0,0,90,6,1,0,0,0,91,92,5,115,0,0,92,93,5,99,0,0,93,94,5,97,0,
  	0,94,95,5,108,0,0,95,96,5,101,0,0,96,8,1,0,0,0,97,98,5,118,0,0,98,99,
  	5,101,0,0,99,100,5,114,0,0,100,101,5,116,0,0,101,102,5,105,0,0,102,103,
  	5,99,0,0,103,104,5,101,0,0,104,105,5,115,0,0,105,10,1,0,0,0,106,107,5,
  	102,0,0,107,108,5,97,0,0,108,109,5,99,0,0,109,110,5,101,0,0,110,111,5,
  	115,0,0,111,12,1,0,0,0,112,113,5,109,0,0,113,114,5,101,0,0,114,115,5,
  	116,0,0,115,116,5,97,0,0,116,14,1,0,0,0,117,118,5,118,0,0,118,16,1,0,
  	0,0,119,120,5,117,0,0,120,121,5,118,0,0,121,18,1,0,0,0,122,123,5,99,0,
  	0,123,124,5,108,0,0,124,125,5,114,0,0,125,20,1,0,0,0,126,127,5,118,0,
  	0,127,128,5,110,0,0,128,22,1,0,0,0,129,130,5,116,0,0,130,131,5,101,0,
  	0,131,132,5,120,0,0,132,133,5,116,0,0,133,134,5,117,0,0,134,135,5,114,
  	0,0,135,136,5,101,0,0,136,24,1,0,0,0,137,138,5,102,0,0,138,26,1,0,0,0,
  	139,140,5,107,0,0,140,141,5,101,0,0,141,142,5,121,0,0,142,143,5,119,0,
  	0,143,144,5,111,0,0,144,145,5,114,0,0,145,146,5,100,0,0,146,147,5,50,
  	0,0,147,148,5,55,0,0,148,28,1,0,0,0,149,150,5,107,0,0,150,151,5,101,0,
  	0,151,152,5,121,0,0,152,153,5,119,0,0,153,154,5,111,0,0,154,155,5,114,
  	0,0,155,156,5,100,0,0,156,157,5,50,0,0,157,158,5,68,0,0,158,30,1,0,0,
  	0,159,160,5,107,0,0,160,161,5,101,0,0,161,162,5,121,0,0,162,163,5,119,
  	0,0,163,164,5,111,0,0,164,165,5,114,0,0,165,166,5,100,0,0,166,167,5,50,
  	0,0,167,168,5,70,0,0,168,32,1,0,0,0,169,170,5,107,0,0,170,171,5,101,0,
  	0,171,172,5,121,0,0,172,173,5,119,0,0,173,174,5,111,0,0,174,175,5,114,
  	0,0,175,176,5,100,0,0,176,177,5,51,0,0,177,178,5,48,0,0,178,34,1,0,0,
  	0,179,180,5,107,0,0,180,181,5,101,0,0,181,182,5,121,0,0,182,183,5,119,
  	0,0,183,184,5,111,0,0,184,185,5,114,0,0,185,186,5,100,0,0,186,187,5,51,
  	0,0,187,188,5,49,0,0,188,36,1,0,0,0,189,190,5,107,0,0,190,191,5,101,0,
  	0,191,192,5,121,0,0,192,193,5,119,0,0,193,194,5,111,0,0,194,195,5,114,
  	0,0,195,196,5,100,0,0,196,197,5,51,0,0,197,198,5,50,0,0,198,38,1,0,0,
  	0,199,203,3,41,20,0,200,203,3,43,21,0,201,203,3,57,28,0,202,199,1,0,0,
  	0,202,200,1,0,0,0,202,201,1,0,0,0,203,40,1,0,0,0,204,206,3,59,29,0,205,
  	204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,211,3,51,25,0,208,210,
  	3,53,26,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,
  	0,0,212,42,1,0,0,0,213,211,1,0,0,0,214,216,3,59,29,0,215,214,1,0,0,0,
  	215,216,1,0,0,0,216,217,1,0,0,0,217,219,3,45,22,0,218,220,3,55,27,0,219,
  	218,1,0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,44,1,
  	0,0,0,223,224,5,48,0,0,224,225,7,0,0,0,225,46,1,0,0,0,226,228,3,59,29,
  	0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,231,3,49,24,0,230,
  	227,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,5,46,0,0,233,241,
  	3,49,24,0,234,236,3,59,29,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,
  	0,0,0,237,238,3,49,24,0,238,239,5,46,0,0,239,241,1,0,0,0,240,230,1,0,
  	0,0,240,235,1,0,0,0,241,48,1,0,0,0,242,244,3,53,26,0,243,242,1,0,0,0,
  	244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,50,1,0,0,0,247,248,
  	7,1,0,0,248,52,1,0,0,0,249,250,7,2,0,0,250,54,1,0,0,0,251,252,7,3,0,0,
  	252,56,1,0,0,0,253,255,3,59,29,0,254,253,1,0,0,0,254,255,1,0,0,0,255,
  	256,1,0,0,0,256,257,5,48,0,0,257,58,1,0,0,0,258,259,7,4,0,0,259,60,1,
  	0,0,0,260,262,5,34,0,0,261,263,3,63,31,0,262,261,1,0,0,0,262,263,1,0,
  	0,0,263,264,1,0,0,0,264,265,5,34,0,0,265,62,1,0,0,0,266,268,3,65,32,0,
  	267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,64,
  	1,0,0,0,271,279,8,5,0,0,272,279,3,67,33,0,273,274,5,92,0,0,274,279,5,
  	10,0,0,275,276,5,92,0,0,276,277,5,13,0,0,277,279,5,10,0,0,278,271,1,0,
  	0,0,278,272,1,0,0,0,278,273,1,0,0,0,278,275,1,0,0,0,279,66,1,0,0,0,280,
  	281,5,92,0,0,281,282,7,6,0,0,282,68,1,0,0,0,283,285,7,7,0,0,284,283,1,
  	0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,
  	288,289,6,34,0,0,289,70,1,0,0,0,290,292,5,13,0,0,291,293,5,10,0,0,292,
  	291,1,0,0,0,292,293,1,0,0,0,293,296,1,0,0,0,294,296,5,10,0,0,295,290,
  	1,0,0,0,295,294,1,0,0,0,296,297,1,0,0,0,297,298,6,35,0,0,298,72,1,0,0,
  	0,299,300,5,47,0,0,300,301,5,42,0,0,301,305,1,0,0,0,302,304,9,0,0,0,303,
  	302,1,0,0,0,304,307,1,0,0,0,305,306,1,0,0,0,305,303,1,0,0,0,306,308,1,
  	0,0,0,307,305,1,0,0,0,308,309,5,42,0,0,309,310,5,47,0,0,310,311,1,0,0,
  	0,311,312,6,36,0,0,312,74,1,0,0,0,313,314,5,47,0,0,314,315,5,47,0,0,315,
  	319,1,0,0,0,316,318,8,8,0,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,
  	0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,6,37,0,
  	0,323,76,1,0,0,0,20,0,202,205,211,215,221,227,230,235,240,245,254,262,
  	269,278,286,292,295,305,319,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gdblexerLexerStaticData = staticData.release();
}

}

GdbLexer::GdbLexer(CharStream *input) : Lexer(input) {
  GdbLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *gdblexerLexerStaticData->atn, gdblexerLexerStaticData->decisionToDFA, gdblexerLexerStaticData->sharedContextCache);
}

GdbLexer::~GdbLexer() {
  delete _interpreter;
}

std::string GdbLexer::getGrammarFileName() const {
  return "Gdb.g4";
}

const std::vector<std::string>& GdbLexer::getRuleNames() const {
  return gdblexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& GdbLexer::getChannelNames() const {
  return gdblexerLexerStaticData->channelNames;
}

const std::vector<std::string>& GdbLexer::getModeNames() const {
  return gdblexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& GdbLexer::getVocabulary() const {
  return gdblexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GdbLexer::getSerializedATN() const {
  return gdblexerLexerStaticData->serializedATN;
}

const atn::ATN& GdbLexer::getATN() const {
  return *gdblexerLexerStaticData->atn;
}




void GdbLexer::initialize() {
  std::call_once(gdblexerLexerOnceFlag, gdblexerLexerInitialize);
}
