
// Generated from ..\..\..\src\JamFileTool\Asset\Mdb\Mdb.g4 by ANTLR 4.10.1


#include "MdbLexer.h"


using namespace antlr4;

using namespace mdb;


using namespace antlr4;

namespace {

struct MdbLexerStaticData final {
  MdbLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MdbLexerStaticData(const MdbLexerStaticData&) = delete;
  MdbLexerStaticData(MdbLexerStaticData&&) = delete;
  MdbLexerStaticData& operator=(const MdbLexerStaticData&) = delete;
  MdbLexerStaticData& operator=(MdbLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag mdblexerLexerOnceFlag;
MdbLexerStaticData *mdblexerLexerStaticData = nullptr;

void mdblexerLexerInitialize() {
  assert(mdblexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<MdbLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "Materials", "Material", "Color1", "Color0", "Keyword2A", 
      "Keyword2B", "Texture", "Keyword2D", "Keyword2E", "Keyword2F", "Keyword30", 
      "Keyword31", "Keyword32", "Keyword33", "Keyword34", "Keyword35", "Keyword36", 
      "Keyword37", "Keyword38", "Keyword39", "Keyword3A", "Keyword3B", "Keyword3C", 
      "Keyword3D", "Keyword3E", "Keyword3F", "Keyword40", "Keyword41", "Keyword42", 
      "Keyword43", "Keyword44", "Keyword45", "Opacity", "Keyword47", "Keyword48", 
      "Keyword49", "Keyword4A", "Keyword4B", "Keyword4C", "Keyword4D", "Keyword4E", 
      "Keyword4F", "Keyword50", "IntegerConstant", "DecimalConstant", "HexadecimalConstant", 
      "HexadecimalPrefix", "NonzeroDigit", "Digit", "HexadecimalDigit", 
      "StringLiteral", "SCharSequence", "SChar", "EscapeSequence", "Whitespace", 
      "Newline", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'{'", "'}'", "'materials'", "'material'", "'color1'", "'color0'", 
      "'keyword2A'", "'keyword2B'", "'texture'", "'keyword2D'", "'keyword2E'", 
      "'keyword2F'", "'keyword30'", "'keyword31'", "'keyword32'", "'keyword33'", 
      "'keyword34'", "'keyword35'", "'keyword36'", "'keyword37'", "'keyword38'", 
      "'keyword39'", "'keyword3A'", "'keyword3B'", "'keyword3C'", "'keyword3D'", 
      "'keyword3E'", "'keyword3F'", "'keyword40'", "'keyword41'", "'keyword42'", 
      "'keyword43'", "'keyword44'", "'keyword45'", "'opacity'", "'keyword47'", 
      "'keyword48'", "'keyword49'", "'keyword4A'", "'keyword4B'", "'keyword4C'", 
      "'keyword4D'", "'keyword4E'", "'keyword4F'", "'keyword50'"
    },
    std::vector<std::string>{
      "", "", "", "Materials", "Material", "Color1", "Color0", "Keyword2A", 
      "Keyword2B", "Texture", "Keyword2D", "Keyword2E", "Keyword2F", "Keyword30", 
      "Keyword31", "Keyword32", "Keyword33", "Keyword34", "Keyword35", "Keyword36", 
      "Keyword37", "Keyword38", "Keyword39", "Keyword3A", "Keyword3B", "Keyword3C", 
      "Keyword3D", "Keyword3E", "Keyword3F", "Keyword40", "Keyword41", "Keyword42", 
      "Keyword43", "Keyword44", "Keyword45", "Opacity", "Keyword47", "Keyword48", 
      "Keyword49", "Keyword4A", "Keyword4B", "Keyword4C", "Keyword4D", "Keyword4E", 
      "Keyword4F", "Keyword50", "IntegerConstant", "StringLiteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,51,635,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,3,45,548,
  	8,45,1,46,1,46,5,46,552,8,46,10,46,12,46,555,9,46,1,47,1,47,4,47,559,
  	8,47,11,47,12,47,560,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
  	1,52,3,52,574,8,52,1,52,1,52,1,53,4,53,579,8,53,11,53,12,53,580,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,3,54,590,8,54,1,55,1,55,1,55,1,56,4,56,
  	596,8,56,11,56,12,56,597,1,56,1,56,1,57,1,57,3,57,604,8,57,1,57,3,57,
  	607,8,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,615,8,58,10,58,12,58,618,
  	9,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,629,8,59,10,59,
  	12,59,632,9,59,1,59,1,59,1,616,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,0,95,0,97,0,99,0,101,0,103,0,105,47,107,0,109,
  	0,111,0,113,48,115,49,117,50,119,51,1,0,8,2,0,88,88,120,120,1,0,49,57,
  	1,0,48,57,3,0,48,57,65,70,97,102,4,0,10,10,13,13,34,34,92,92,10,0,34,
  	34,39,39,63,63,92,92,97,98,102,102,110,110,114,114,116,116,118,118,2,
  	0,9,9,32,32,2,0,10,10,13,13,639,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
  	7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
  	0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
  	0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
  	1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
  	0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
  	0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
  	1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
  	0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
  	0,105,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
  	1,121,1,0,0,0,3,123,1,0,0,0,5,125,1,0,0,0,7,135,1,0,0,0,9,144,1,0,0,0,
  	11,151,1,0,0,0,13,158,1,0,0,0,15,168,1,0,0,0,17,178,1,0,0,0,19,186,1,
  	0,0,0,21,196,1,0,0,0,23,206,1,0,0,0,25,216,1,0,0,0,27,226,1,0,0,0,29,
  	236,1,0,0,0,31,246,1,0,0,0,33,256,1,0,0,0,35,266,1,0,0,0,37,276,1,0,0,
  	0,39,286,1,0,0,0,41,296,1,0,0,0,43,306,1,0,0,0,45,316,1,0,0,0,47,326,
  	1,0,0,0,49,336,1,0,0,0,51,346,1,0,0,0,53,356,1,0,0,0,55,366,1,0,0,0,57,
  	376,1,0,0,0,59,386,1,0,0,0,61,396,1,0,0,0,63,406,1,0,0,0,65,416,1,0,0,
  	0,67,426,1,0,0,0,69,436,1,0,0,0,71,444,1,0,0,0,73,454,1,0,0,0,75,464,
  	1,0,0,0,77,474,1,0,0,0,79,484,1,0,0,0,81,494,1,0,0,0,83,504,1,0,0,0,85,
  	514,1,0,0,0,87,524,1,0,0,0,89,534,1,0,0,0,91,547,1,0,0,0,93,549,1,0,0,
  	0,95,556,1,0,0,0,97,562,1,0,0,0,99,565,1,0,0,0,101,567,1,0,0,0,103,569,
  	1,0,0,0,105,571,1,0,0,0,107,578,1,0,0,0,109,589,1,0,0,0,111,591,1,0,0,
  	0,113,595,1,0,0,0,115,606,1,0,0,0,117,610,1,0,0,0,119,624,1,0,0,0,121,
  	122,5,123,0,0,122,2,1,0,0,0,123,124,5,125,0,0,124,4,1,0,0,0,125,126,5,
  	109,0,0,126,127,5,97,0,0,127,128,5,116,0,0,128,129,5,101,0,0,129,130,
  	5,114,0,0,130,131,5,105,0,0,131,132,5,97,0,0,132,133,5,108,0,0,133,134,
  	5,115,0,0,134,6,1,0,0,0,135,136,5,109,0,0,136,137,5,97,0,0,137,138,5,
  	116,0,0,138,139,5,101,0,0,139,140,5,114,0,0,140,141,5,105,0,0,141,142,
  	5,97,0,0,142,143,5,108,0,0,143,8,1,0,0,0,144,145,5,99,0,0,145,146,5,111,
  	0,0,146,147,5,108,0,0,147,148,5,111,0,0,148,149,5,114,0,0,149,150,5,49,
  	0,0,150,10,1,0,0,0,151,152,5,99,0,0,152,153,5,111,0,0,153,154,5,108,0,
  	0,154,155,5,111,0,0,155,156,5,114,0,0,156,157,5,48,0,0,157,12,1,0,0,0,
  	158,159,5,107,0,0,159,160,5,101,0,0,160,161,5,121,0,0,161,162,5,119,0,
  	0,162,163,5,111,0,0,163,164,5,114,0,0,164,165,5,100,0,0,165,166,5,50,
  	0,0,166,167,5,65,0,0,167,14,1,0,0,0,168,169,5,107,0,0,169,170,5,101,0,
  	0,170,171,5,121,0,0,171,172,5,119,0,0,172,173,5,111,0,0,173,174,5,114,
  	0,0,174,175,5,100,0,0,175,176,5,50,0,0,176,177,5,66,0,0,177,16,1,0,0,
  	0,178,179,5,116,0,0,179,180,5,101,0,0,180,181,5,120,0,0,181,182,5,116,
  	0,0,182,183,5,117,0,0,183,184,5,114,0,0,184,185,5,101,0,0,185,18,1,0,
  	0,0,186,187,5,107,0,0,187,188,5,101,0,0,188,189,5,121,0,0,189,190,5,119,
  	0,0,190,191,5,111,0,0,191,192,5,114,0,0,192,193,5,100,0,0,193,194,5,50,
  	0,0,194,195,5,68,0,0,195,20,1,0,0,0,196,197,5,107,0,0,197,198,5,101,0,
  	0,198,199,5,121,0,0,199,200,5,119,0,0,200,201,5,111,0,0,201,202,5,114,
  	0,0,202,203,5,100,0,0,203,204,5,50,0,0,204,205,5,69,0,0,205,22,1,0,0,
  	0,206,207,5,107,0,0,207,208,5,101,0,0,208,209,5,121,0,0,209,210,5,119,
  	0,0,210,211,5,111,0,0,211,212,5,114,0,0,212,213,5,100,0,0,213,214,5,50,
  	0,0,214,215,5,70,0,0,215,24,1,0,0,0,216,217,5,107,0,0,217,218,5,101,0,
  	0,218,219,5,121,0,0,219,220,5,119,0,0,220,221,5,111,0,0,221,222,5,114,
  	0,0,222,223,5,100,0,0,223,224,5,51,0,0,224,225,5,48,0,0,225,26,1,0,0,
  	0,226,227,5,107,0,0,227,228,5,101,0,0,228,229,5,121,0,0,229,230,5,119,
  	0,0,230,231,5,111,0,0,231,232,5,114,0,0,232,233,5,100,0,0,233,234,5,51,
  	0,0,234,235,5,49,0,0,235,28,1,0,0,0,236,237,5,107,0,0,237,238,5,101,0,
  	0,238,239,5,121,0,0,239,240,5,119,0,0,240,241,5,111,0,0,241,242,5,114,
  	0,0,242,243,5,100,0,0,243,244,5,51,0,0,244,245,5,50,0,0,245,30,1,0,0,
  	0,246,247,5,107,0,0,247,248,5,101,0,0,248,249,5,121,0,0,249,250,5,119,
  	0,0,250,251,5,111,0,0,251,252,5,114,0,0,252,253,5,100,0,0,253,254,5,51,
  	0,0,254,255,5,51,0,0,255,32,1,0,0,0,256,257,5,107,0,0,257,258,5,101,0,
  	0,258,259,5,121,0,0,259,260,5,119,0,0,260,261,5,111,0,0,261,262,5,114,
  	0,0,262,263,5,100,0,0,263,264,5,51,0,0,264,265,5,52,0,0,265,34,1,0,0,
  	0,266,267,5,107,0,0,267,268,5,101,0,0,268,269,5,121,0,0,269,270,5,119,
  	0,0,270,271,5,111,0,0,271,272,5,114,0,0,272,273,5,100,0,0,273,274,5,51,
  	0,0,274,275,5,53,0,0,275,36,1,0,0,0,276,277,5,107,0,0,277,278,5,101,0,
  	0,278,279,5,121,0,0,279,280,5,119,0,0,280,281,5,111,0,0,281,282,5,114,
  	0,0,282,283,5,100,0,0,283,284,5,51,0,0,284,285,5,54,0,0,285,38,1,0,0,
  	0,286,287,5,107,0,0,287,288,5,101,0,0,288,289,5,121,0,0,289,290,5,119,
  	0,0,290,291,5,111,0,0,291,292,5,114,0,0,292,293,5,100,0,0,293,294,5,51,
  	0,0,294,295,5,55,0,0,295,40,1,0,0,0,296,297,5,107,0,0,297,298,5,101,0,
  	0,298,299,5,121,0,0,299,300,5,119,0,0,300,301,5,111,0,0,301,302,5,114,
  	0,0,302,303,5,100,0,0,303,304,5,51,0,0,304,305,5,56,0,0,305,42,1,0,0,
  	0,306,307,5,107,0,0,307,308,5,101,0,0,308,309,5,121,0,0,309,310,5,119,
  	0,0,310,311,5,111,0,0,311,312,5,114,0,0,312,313,5,100,0,0,313,314,5,51,
  	0,0,314,315,5,57,0,0,315,44,1,0,0,0,316,317,5,107,0,0,317,318,5,101,0,
  	0,318,319,5,121,0,0,319,320,5,119,0,0,320,321,5,111,0,0,321,322,5,114,
  	0,0,322,323,5,100,0,0,323,324,5,51,0,0,324,325,5,65,0,0,325,46,1,0,0,
  	0,326,327,5,107,0,0,327,328,5,101,0,0,328,329,5,121,0,0,329,330,5,119,
  	0,0,330,331,5,111,0,0,331,332,5,114,0,0,332,333,5,100,0,0,333,334,5,51,
  	0,0,334,335,5,66,0,0,335,48,1,0,0,0,336,337,5,107,0,0,337,338,5,101,0,
  	0,338,339,5,121,0,0,339,340,5,119,0,0,340,341,5,111,0,0,341,342,5,114,
  	0,0,342,343,5,100,0,0,343,344,5,51,0,0,344,345,5,67,0,0,345,50,1,0,0,
  	0,346,347,5,107,0,0,347,348,5,101,0,0,348,349,5,121,0,0,349,350,5,119,
  	0,0,350,351,5,111,0,0,351,352,5,114,0,0,352,353,5,100,0,0,353,354,5,51,
  	0,0,354,355,5,68,0,0,355,52,1,0,0,0,356,357,5,107,0,0,357,358,5,101,0,
  	0,358,359,5,121,0,0,359,360,5,119,0,0,360,361,5,111,0,0,361,362,5,114,
  	0,0,362,363,5,100,0,0,363,364,5,51,0,0,364,365,5,69,0,0,365,54,1,0,0,
  	0,366,367,5,107,0,0,367,368,5,101,0,0,368,369,5,121,0,0,369,370,5,119,
  	0,0,370,371,5,111,0,0,371,372,5,114,0,0,372,373,5,100,0,0,373,374,5,51,
  	0,0,374,375,5,70,0,0,375,56,1,0,0,0,376,377,5,107,0,0,377,378,5,101,0,
  	0,378,379,5,121,0,0,379,380,5,119,0,0,380,381,5,111,0,0,381,382,5,114,
  	0,0,382,383,5,100,0,0,383,384,5,52,0,0,384,385,5,48,0,0,385,58,1,0,0,
  	0,386,387,5,107,0,0,387,388,5,101,0,0,388,389,5,121,0,0,389,390,5,119,
  	0,0,390,391,5,111,0,0,391,392,5,114,0,0,392,393,5,100,0,0,393,394,5,52,
  	0,0,394,395,5,49,0,0,395,60,1,0,0,0,396,397,5,107,0,0,397,398,5,101,0,
  	0,398,399,5,121,0,0,399,400,5,119,0,0,400,401,5,111,0,0,401,402,5,114,
  	0,0,402,403,5,100,0,0,403,404,5,52,0,0,404,405,5,50,0,0,405,62,1,0,0,
  	0,406,407,5,107,0,0,407,408,5,101,0,0,408,409,5,121,0,0,409,410,5,119,
  	0,0,410,411,5,111,0,0,411,412,5,114,0,0,412,413,5,100,0,0,413,414,5,52,
  	0,0,414,415,5,51,0,0,415,64,1,0,0,0,416,417,5,107,0,0,417,418,5,101,0,
  	0,418,419,5,121,0,0,419,420,5,119,0,0,420,421,5,111,0,0,421,422,5,114,
  	0,0,422,423,5,100,0,0,423,424,5,52,0,0,424,425,5,52,0,0,425,66,1,0,0,
  	0,426,427,5,107,0,0,427,428,5,101,0,0,428,429,5,121,0,0,429,430,5,119,
  	0,0,430,431,5,111,0,0,431,432,5,114,0,0,432,433,5,100,0,0,433,434,5,52,
  	0,0,434,435,5,53,0,0,435,68,1,0,0,0,436,437,5,111,0,0,437,438,5,112,0,
  	0,438,439,5,97,0,0,439,440,5,99,0,0,440,441,5,105,0,0,441,442,5,116,0,
  	0,442,443,5,121,0,0,443,70,1,0,0,0,444,445,5,107,0,0,445,446,5,101,0,
  	0,446,447,5,121,0,0,447,448,5,119,0,0,448,449,5,111,0,0,449,450,5,114,
  	0,0,450,451,5,100,0,0,451,452,5,52,0,0,452,453,5,55,0,0,453,72,1,0,0,
  	0,454,455,5,107,0,0,455,456,5,101,0,0,456,457,5,121,0,0,457,458,5,119,
  	0,0,458,459,5,111,0,0,459,460,5,114,0,0,460,461,5,100,0,0,461,462,5,52,
  	0,0,462,463,5,56,0,0,463,74,1,0,0,0,464,465,5,107,0,0,465,466,5,101,0,
  	0,466,467,5,121,0,0,467,468,5,119,0,0,468,469,5,111,0,0,469,470,5,114,
  	0,0,470,471,5,100,0,0,471,472,5,52,0,0,472,473,5,57,0,0,473,76,1,0,0,
  	0,474,475,5,107,0,0,475,476,5,101,0,0,476,477,5,121,0,0,477,478,5,119,
  	0,0,478,479,5,111,0,0,479,480,5,114,0,0,480,481,5,100,0,0,481,482,5,52,
  	0,0,482,483,5,65,0,0,483,78,1,0,0,0,484,485,5,107,0,0,485,486,5,101,0,
  	0,486,487,5,121,0,0,487,488,5,119,0,0,488,489,5,111,0,0,489,490,5,114,
  	0,0,490,491,5,100,0,0,491,492,5,52,0,0,492,493,5,66,0,0,493,80,1,0,0,
  	0,494,495,5,107,0,0,495,496,5,101,0,0,496,497,5,121,0,0,497,498,5,119,
  	0,0,498,499,5,111,0,0,499,500,5,114,0,0,500,501,5,100,0,0,501,502,5,52,
  	0,0,502,503,5,67,0,0,503,82,1,0,0,0,504,505,5,107,0,0,505,506,5,101,0,
  	0,506,507,5,121,0,0,507,508,5,119,0,0,508,509,5,111,0,0,509,510,5,114,
  	0,0,510,511,5,100,0,0,511,512,5,52,0,0,512,513,5,68,0,0,513,84,1,0,0,
  	0,514,515,5,107,0,0,515,516,5,101,0,0,516,517,5,121,0,0,517,518,5,119,
  	0,0,518,519,5,111,0,0,519,520,5,114,0,0,520,521,5,100,0,0,521,522,5,52,
  	0,0,522,523,5,69,0,0,523,86,1,0,0,0,524,525,5,107,0,0,525,526,5,101,0,
  	0,526,527,5,121,0,0,527,528,5,119,0,0,528,529,5,111,0,0,529,530,5,114,
  	0,0,530,531,5,100,0,0,531,532,5,52,0,0,532,533,5,70,0,0,533,88,1,0,0,
  	0,534,535,5,107,0,0,535,536,5,101,0,0,536,537,5,121,0,0,537,538,5,119,
  	0,0,538,539,5,111,0,0,539,540,5,114,0,0,540,541,5,100,0,0,541,542,5,53,
  	0,0,542,543,5,48,0,0,543,90,1,0,0,0,544,548,3,93,46,0,545,548,3,95,47,
  	0,546,548,5,48,0,0,547,544,1,0,0,0,547,545,1,0,0,0,547,546,1,0,0,0,548,
  	92,1,0,0,0,549,553,3,99,49,0,550,552,3,101,50,0,551,550,1,0,0,0,552,555,
  	1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,94,1,0,0,0,555,553,1,0,0,
  	0,556,558,3,97,48,0,557,559,3,103,51,0,558,557,1,0,0,0,559,560,1,0,0,
  	0,560,558,1,0,0,0,560,561,1,0,0,0,561,96,1,0,0,0,562,563,5,48,0,0,563,
  	564,7,0,0,0,564,98,1,0,0,0,565,566,7,1,0,0,566,100,1,0,0,0,567,568,7,
  	2,0,0,568,102,1,0,0,0,569,570,7,3,0,0,570,104,1,0,0,0,571,573,5,34,0,
  	0,572,574,3,107,53,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,
  	575,576,5,34,0,0,576,106,1,0,0,0,577,579,3,109,54,0,578,577,1,0,0,0,579,
  	580,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,108,1,0,0,0,582,590,8,
  	4,0,0,583,590,3,111,55,0,584,585,5,92,0,0,585,590,5,10,0,0,586,587,5,
  	92,0,0,587,588,5,13,0,0,588,590,5,10,0,0,589,582,1,0,0,0,589,583,1,0,
  	0,0,589,584,1,0,0,0,589,586,1,0,0,0,590,110,1,0,0,0,591,592,5,92,0,0,
  	592,593,7,5,0,0,593,112,1,0,0,0,594,596,7,6,0,0,595,594,1,0,0,0,596,597,
  	1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,6,56,
  	0,0,600,114,1,0,0,0,601,603,5,13,0,0,602,604,5,10,0,0,603,602,1,0,0,0,
  	603,604,1,0,0,0,604,607,1,0,0,0,605,607,5,10,0,0,606,601,1,0,0,0,606,
  	605,1,0,0,0,607,608,1,0,0,0,608,609,6,57,0,0,609,116,1,0,0,0,610,611,
  	5,47,0,0,611,612,5,42,0,0,612,616,1,0,0,0,613,615,9,0,0,0,614,613,1,0,
  	0,0,615,618,1,0,0,0,616,617,1,0,0,0,616,614,1,0,0,0,617,619,1,0,0,0,618,
  	616,1,0,0,0,619,620,5,42,0,0,620,621,5,47,0,0,621,622,1,0,0,0,622,623,
  	6,58,0,0,623,118,1,0,0,0,624,625,5,47,0,0,625,626,5,47,0,0,626,630,1,
  	0,0,0,627,629,8,7,0,0,628,627,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,
  	630,631,1,0,0,0,631,633,1,0,0,0,632,630,1,0,0,0,633,634,6,59,0,0,634,
  	120,1,0,0,0,12,0,547,553,560,573,580,589,597,603,606,616,630,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mdblexerLexerStaticData = staticData.release();
}

}

MdbLexer::MdbLexer(CharStream *input) : Lexer(input) {
  MdbLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mdblexerLexerStaticData->atn, mdblexerLexerStaticData->decisionToDFA, mdblexerLexerStaticData->sharedContextCache);
}

MdbLexer::~MdbLexer() {
  delete _interpreter;
}

std::string MdbLexer::getGrammarFileName() const {
  return "Mdb.g4";
}

const std::vector<std::string>& MdbLexer::getRuleNames() const {
  return mdblexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MdbLexer::getChannelNames() const {
  return mdblexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MdbLexer::getModeNames() const {
  return mdblexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MdbLexer::getVocabulary() const {
  return mdblexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MdbLexer::getSerializedATN() const {
  return mdblexerLexerStaticData->serializedATN;
}

const atn::ATN& MdbLexer::getATN() const {
  return *mdblexerLexerStaticData->atn;
}




void MdbLexer::initialize() {
  std::call_once(mdblexerLexerOnceFlag, mdblexerLexerInitialize);
}
